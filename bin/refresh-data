#!/usr/bin/env ruby

require "json"
require "yaml"

# gems
require "dotenv"
require "octokit"
require "redis"


#############
# Functions #
#############

def processContributors
  contributors = []

  team_id = $settings["team_id"]

  if team_id.nil?
    abort("No team_id set in settings.yml.")
  end

  members = fetchMembers(team_id)

  members.each do |user|
    events = Octokit.user_public_events(user[:login], { :per_page => 100 })

    events.map! { |event|
      {
        :type => event.type,
        :repo => event.repo,
      }
    }

    activity = tally(events)

    unless activity.empty?
      contributors.push(
        :user => user,
        :activity => activity,
      )
    end
  end

  return contributors
end

def fetchMembers(team_id)
  blacklist = $settings["blacklist"] || []

  members = Octokit.team_members(team_id, { :per_page => 100 })

  members.select! { |member| !blacklist.include?(member.login) }

  members.map! { |user|
    {
      :login => user.login,
      :avatar_url => user.avatar_url,
      :html_url => user.html_url,
    }
  }

  members.sort_by! { |member| member[:login].downcase }

  return members
end

def tally(events)
  relevant_events = [
    "GistEvent",
    "IssueCommentEvent",
    "IssuesEvent",
    "PageBuildEvent",
    "PublicEvent",
    "PullRequestEvent",
    "PullRequestReviewCommentEvent",
    "PushEvent",
    "ReleaseEvent",
    "RepositoryEvent",
  ]

  tally = {}

  events.each do |event|
    event_type = event[:type]
    if relevant_events.include?(event_type)
      unless tally.key?(event_type)
        tally[event_type] = 0
      end

      tally[event_type] += 1
    end
  end

  tally = tally.sort.to_h

  return tally
end


########################
# Data refresh process #
########################

puts "Starting data refresh..."

# load environment vars
Dotenv.load

# load settings
$settings = YAML.load(File.open("./settings.yml"))

Octokit.auto_paginate = true

Octokit.configure do |c|
  c.access_token = ENV["GITHUB_ACCESS_TOKEN"]
end

redis = Redis.new

contributors = processContributors()
contributors = JSON.fast_generate(contributors)

redis.set("contributors", contributors)
redis.set("last_updated", DateTime.now.to_s)

puts "Data refresh complete!"
